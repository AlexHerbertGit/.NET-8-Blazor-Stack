@page "/dashboard"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject Web.Services.ApiClient Api
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize]

<h3>Dashboard</h3>

@if (loading)
{
    <p>Loading…</p>
}
else if (Me is null)
{
    <p>Not logged in.</p>
}
else
{
    <pre>@System.Text.Json.JsonSerializer.Serialize(
                    Me,
                    new System.Text.Json.JsonSerializerOptions { WriteIndented = true })</pre>
}

@code {
    MeDto? Me;
    bool loading = true;

    class MeDto
    {
        public string? id { get; set; }
        public string? email { get; set; }
        public string? role { get; set; }
        public int tokenBalance { get; set; }
        public string? name { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        try
        {
            var state = await AuthStateProvider.GetAuthenticationStateAsync();
            var u = state.User;

            if (u?.Identity?.IsAuthenticated != true)
            {
                Nav.NavigateTo("/login");
                return;
            }

            Me = new MeDto
            {
                id = u.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? u.FindFirst("sub")?.Value,
                email = u.FindFirst(ClaimTypes.Email)?.Value ?? u.FindFirst("email")?.Value,
                role = u.FindFirst(ClaimTypes.Role)?.Value ?? u.FindFirst("role")?.Value,
                name = u.Identity?.Name ?? u.FindFirst("name")?.Value,
                tokenBalance = 0
            };

            // (No API calls here, so no 404 noise)
        }
        finally { loading = false; }
    }
}