@page "/register"
@using Microsoft.AspNetCore.Components.Web
@inject Web.Services.ApiClient Api

<h3 class="mb-3">Register</h3>

<div class="vstack gap-2" style="max-width: 420px">
    <input class="form-control"
           placeholder="Name"
           value="@Name"
           @oninput="e => Name = e.Value?.ToString() ?? string.Empty" />

    <input class="form-control"
           placeholder="Email"
           value="@Email"
           @oninput="e => Email = e.Value?.ToString() ?? string.Empty" />

    <input class="form-control"
           type="password"
           placeholder="Password"
           value="@Password"
           @oninput="e => Password = e.Value?.ToString() ?? string.Empty" />

    <select class="form-select" value="@Role" @onchange="OnRoleChanged">
        <option value="beneficiary">beneficiary</option>
        <option value="member">member</option>
    </select>

    <div class="hstack gap-2">
        <button class="btn btn-primary" @onclick="RegisterAsync">Create Account</button>
        <button class="btn btn-outline-secondary" @onclick="@(() => Result = $"Clicked {DateTime.Now:T}")">Ping</button>
    </div>

    <pre class="mt-2">@Result</pre>
</div>

@code {
    string Name = "", Email = "", Password = "", Role = "beneficiary";
    string? Result;

    class RegisterReq
    {
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
        public string Role { get; set; } = "beneficiary";
        public string? Address { get; set; }
    }

    async Task RegisterAsync()
    {
        try
        {
            var payload = new RegisterReq { Name = Name, Email = Email, Password = Password, Role = Role };
            var r = await Api.Public.PostAsJsonAsync("api/auth/register", payload);
            var body = await r.Content.ReadAsStringAsync();
            Result = $"{(int)r.StatusCode} {r.ReasonPhrase}\n{body}";
        }
        catch (Exception ex)
        {
            Result = $"EXCEPTION: {ex.GetType().Name} - {ex.Message}";
        }
    }

    void OnRoleChanged(ChangeEventArgs e) => Role = e?.Value?.ToString() ?? "beneficiary";
}